#!/bin/bash

set -eu

# Begin the vulnerability check process.
echo "Checking system for CVE-2024-3094 Vulnerability..."
# Provide a link to the CVE details for reference.
echo "CVE details: https://nvd.nist.gov/vuln/detail/CVE-2024-3094"

# Attempt to find the binary path for sshd using whereis and awk to extract the path.
sshd_binary_path=$(whereis -b sshd | awk '{print $2}')
# Use ldd to find the path to the liblzma library used by sshd, filtering for the library path.
liblzma_path=$(ldd "$sshd_binary_path" 2>/dev/null | grep -o '/.*liblzma[^ ]*' | head -1)

# If the liblzma path is not found with sshd, try to find it with the xz binary.
if [ -z "$liblzma_path" ]; then
    xz_binary_path=$(whereis -b xz | awk '{print $2}')
    liblzma_path=$(ldd "$xz_binary_path" 2>/dev/null | grep -o '/.*liblzma[^ ]*' | head -1)
fi

# Exit the script if the liblzma library cannot be found, as it's required for further checks.
if [ -z "$liblzma_path" ]; then
    echo "Possibly not vulnerable (liblzma library not found)"
    exit
fi

# Announce the check for a specific vulnerable function signature within liblzma.
echo "Scanning liblzma for vulnerable function signature..."
# Use hexdump to check for the specific vulnerable function signature in liblzma.
if hexdump -ve '1/1 "%.2x"' "$liblzma_path" | grep -q 'f30f1efa554889f54c89ce5389fb81e7000000804883ec28488954241848894c2410'; then
    echo "Detected vulnerable function signature in liblzma: VULNERABLE"
else
    echo "Function signature in liblzma: NOT VULNERABLE"
fi

# Determine the package manager present on the system (supports dpkg, rpm, pacman).
if command -v dpkg >/dev/null; then
    package_manager="dpkg"
elif command -v rpm >/dev/null; then
    package_manager="rpm"
elif command -v pacman >/dev/null; then
    package_manager="pacman"
else
    # Exit if none of the supported package managers are found.
    echo "Unsupported package manager. This script requires dpkg, rpm, or pacman."
    exit 1
fi

# Announce the verification of the xz version using the identified package manager.
echo "Verifying xz version using $package_manager package manager..."

# Fetch the xz version based on the package manager identified.
case $package_manager in
    dpkg)
        # For dpkg, use dpkg -s to get the version of xz-utils or xz.
        xz_version_info=$(dpkg -s xz-utils | grep '^Version:' | awk '{print $2}')
        # Fallback to xz if xz-utils is not the package name.
        if [ -z "$xz_version_info" ]; then
            xz_version_info=$(dpkg -s xz | grep '^Version:' | awk '{print $2}')
        fi
        ;;
    rpm)
        # For rpm, use rpm -q to query the version of xz.
        xz_version_info=$(rpm -q xz --qf "%{VERSION}-%{RELEASE}\n")
        ;;
    pacman)
        # For pacman, use pacman -Qi to get the version of xz.
        xz_version_info=$(pacman -Qi xz | grep '^Version' | awk '{print $3}')
        ;;
    *)
        # Catch-all for unsupported package managers, which should never be reached.
        echo "Error: Unsupported package manager."
        exit 1
        ;;
esac

# If the xz version information could not be determined, exit the script.
if [ -z "$xz_version_info" ]; then
    echo "Unable to determine xz version."
    exit 1
fi

# Compare the xz version against known vulnerable versions.
if [[ "$xz_version_info" == "5.6.0"* || ("$xz_version_info" == "5.6.1"* && "$xz_version_info" != "5.6.1+really"* && "$xz_version_info" != "5.6.1-2"*) ]]; then
    # If the version matches vulnerable patterns, announce it.
    echo "xz version $xz_version_info: VULNERABLE"
elif [[ "$xz_version_info" == "5.6.1+really"* || "$xz_version_info" == "5.6.1-2"* ]]; then
    # If the version is patched, announce it as not vulnerable.
    echo "xz version $xz_version_info: NOT VULNERABLE (patched)"
else
    # Otherwise, announce it as not vulnerable.
    echo "xz version $xz_version_info: NOT VULNERABLE"
fi
